@page "/"
@using Models
@inject NavigationManager NavigationManager
@inject ThingClient Client

<PageTitle>Simple Store</PageTitle>
<div class="row mb-4">
    <div class="col-md-8">
        <h1>Hello, Welcome to <strong><br> The Simple Store</strong></h1>
        The website where you store things... I guess
    </div>
    <div class="col mt-3">
        <div class="btn-group btn-group-md mx-5">
            <input  type="text" 
                    class="form-control" 
                    placeholder="Search by name" 
                    @bind="searchString" 
                    @bind:event="oninput"
                    @onkeyup="FetchThingsAsync">
                
            <button class="btn btn-outline-primary">
                <i class="oi oi-magnifying-glass"/>
            </button>
        </div>
    </div>
</div>
@if(Things is null)
{
    <p><em>Loading...</em></p>
}
else{
    <div class="container">
        <DeleteThing Thing="@currentThing" OnClose="@OnDeleteModalCloseAsync"/>
        <div class="row">
            <div class="col-md-10">
                @if(Things.Count()==0&&searchString=="")
                {
                    <h1>There are no things on the Database, add one on the blue button :D</h1>
                }
                else if(Things.Count()==0&&searchString!="")
                {
                    <h1>There are no matches :'(</h1>
                }
                else
                {
                    <div class="table-responsive table-container my-5">
                        <table class="table table-dark table-striped table-hover table-bordered">
                            <thead>
                                <th>Id</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Edit</th>
                                <th>Delete</th>
                            </thead>
                            <tbody>
                                @foreach(var thing in Things)
                                {
                                    <tr>
                                        <td>@thing.Id</td>
                                        <td>@thing.Name</td>
                                        <td>@thing.Description</td>
                                        <td>
                                            <button class="btn btn-outline-primary" @onclick="(()=>EditThing(thing.Id))">
                                                <i class="oi oi-pencil"/>
                                            </button>
                                        </td>
                                        <td>
                                            @* Setting CurrentThing on click event *@
                                            <button class="btn btn-outline-danger" @onclick="(()=> currentThing = thing)" data-bs-toggle="modal" data-bs-target="#DeleteModal">
                                                <i class="oi oi-x"/>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
            <div class="col">
                <a class="btn btn-primary my-5 px-4" href="/edit" role="button">Add Thing</a>
            </div>
        </div>
    </div>
}

@code{
    // Array to store what the API sends
    private Thing[]? Things;
    // Pointer for deletion
    private Thing? currentThing;
    // For the search engine
    private string? searchString = "";

    // Getting from API the data when the page initialices
    protected override async Task OnInitializedAsync()
    {
        await FetchThingsAsync();
    }
    // Go to Edit page
    private void EditThing(int Id)
    {
        NavigationManager.NavigateTo($"/edit/{Id}");
    }
    // if accepted in the modal then delete
    private async Task OnDeleteModalCloseAsync(bool Accepted)
    {
        if (Accepted)
        {
            // Delete
            await Client.DeleteThingAsync(currentThing!.Id);
            // Reload objects
            await FetchThingsAsync();
        }
    }
    
    private async Task FetchThingsAsync()
    {
        Things = await Client.GetThingsAsync(searchString); 
    }
}